//Evan Garcia
//Professor Bolding
//EE 3280
//April 3, 2017
//This program displays a pacman animation on our LCD screen.


#include <device.h>
#include <math.h>

void GLCD_Draw_Line_Polar(int centerX, int centerY, int angle, int length, int color);

int main()
{
    int16 i;       // counter variable
    int16 x = 62;  // x and y coordinates for center of circle
    int16 y = 62;
	
	// Initialize LCD
    GLCD_Start();  
    Backlight_Write(1);       // turn on backlight
    
    LED_Blue_Write(1); LED_Green_Write(1); LED_Red_Write(1); // turn off all LEDs (1 means off)
 
    // clear LCD to black color
    GLCD_Clear(GLCD_BLACK);
    
    // draw pacman
    for(i = 0; i < 360; i++) // loop 360 degrees
    {
        if(i < 60 || i > 120) // don't draw over mouth opening
        {
            GLCD_Draw_Line_Polar(x ,y , i, 50, GLCD_YELLOW);
        }
        
    }
        
    // endless loop - there is nothing to return to, so better to just loop forever
    while(1)
    {
        int16 j = 120;
        
        // close mouth
         for(i = 60; i < 90; i++)
        {
            GLCD_Draw_Line_Polar(x ,y , i, 50, GLCD_YELLOW);
            
            if(j > 90)
            {
                GLCD_Draw_Line_Polar(x ,y , j, 50, GLCD_YELLOW);
                j--;
            }         
        }
        j = 90;
        // open mouth
        for(i = 90; i > 60; i--)
        {
            GLCD_Draw_Line_Polar(x ,y , i, 50, GLCD_BLACK);
            
            if(j < 120)
            {
                GLCD_Draw_Line_Polar(x ,y , j, 50, GLCD_BLACK);
                j++;
            }         
        }
    
        
    LED_Blue_Write(1); LED_Green_Write(1); LED_Red_Write(1);   // make sure all LEDs are off
   
}
}

// function that draws lines for pacman and its animation
void GLCD_Draw_Line_Polar(int centerX, int centerY, int angle, int length, int color)
{
    float angleInradians = angle * 3.14159 / 180; // convert degrees to radians
    float angleCartesianx = length * cos(angleInradians); // convert polar x to cartesian x
    float angleCartesiany = length * sin(angleInradians); // convert polar y to cartesian y
    
    
    GLCD_DrawLine(centerX, centerY, centerX + angleCartesianx, centerY + angleCartesiany, color); // draw line with desired color
    
}

